Starting weekly assessment for Louie, Week5

Current Marks = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 201.45 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week5, Week2, Week4, .git, Week3

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.pyc

**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE 2017-18 Coursework Repository

Week 1; work done on; introduction to UNIX - Practical 1 is in this section, can be found in Week1/Code/UnixPrac1.txt; Shell scripting - Practical 2 here, csvtospace.sh is from this practical; version control using github; the use of LaTeX for writing scientific papers 


Week 2; Intro to python - variables; data types; reading in /writing out files; control statements, loops and list comprehensions; debugging; 3 practicals in sections 15.10.2, 15.12.1 and 15.13.4
Some advanced python started this week but will pick up in week 6


Week3; Intro to R - variables; data types; importing/exporting data; control statements. 
	Advanced topics in R - vectorisation (*apply); more control flow; generating random numbers; 		debugging; 
	Data Exploration - basic plotting; ggplot; data wrangling


Week4; Stats with sparrows week; stats in R; t-tests; degrees of freedom; linear models; 


Week5; QGIS; map projections; map making in python; converting map file formats; zonal stats; raster merging; 
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week5 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK5...

Found the following directories: Code, Data, Results

Found the following files: README.txt, .gitignore

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Week5
|
├── Code
│   └── Practical1.py - script to automate map from practical 1
├── Data
│   ├── README.txt
├── README.txt
├── Results
│   ├── README.txt
└── Sandbox

**********************************************************************

Found 1 code files: Practical1.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file Practical1.py...

File contents are:
**********************************************************************
#!/usr/bin/python

""" Script to convert bioclim temperature and rainfall data and CORINE
landcover files into a shared projection and resolution (BNG 2km grid)
and then extract mean climatic values within land cover classes

Code is PEP8 compliant: https://www.python.org/dev/peps/pep-0008
"""

import numpy # to load rasters as arrays and provide no data masking
import gdal  # to handle raster data files
import os
import csv

# define the two variable prefixes
bioclimVars = ['bio1', 'bio12']

# A) Use GDAL command line tools to convert the bioclim variables and
#    the CORINE data into a 2km UK grid

for eachVar in bioclimVars:

    # - merge the two panes
    # - NOTE: using ('a ' 'b ' 'c') = 'a b c' to wrap long lines cleanly
    cmd = ('gdal_merge.py -n -32768 -a_nodata -32768 -of GTiff '
           '-o ../Data/{f}_merge.tif ../Data/{f}_15.tif ../Data/{f}_16.tif')
    os.system(cmd.format(f=eachVar))

    # - cut out a UK block
    cmd = ('gdal_translate -projwin -12.0 60.0 4.0 48.0 -of GTiff '
           '../Data/{f}_merge.tif ../Data/{f}_UK.tif')
    os.system(cmd.format(f=eachVar))

    # - reproject and resample into a 2 km grid
    cmd = ('gdalwarp -s_srs EPSG:4326 -t_srs EPSG:27700 -r cubic -of GTiff '
           '-dstnodata -32768 -tr 2000 2000 -te -220000 -10000 680000 1080000 '
           '../Data/{f}_UK.tif ../Data/{f}_UK_BNG.tif')
    os.system(cmd.format(f=eachVar))

# Use GDAL command line to convert the landcover data
# - cut out a UK block
cmd = ('gdal_translate -projwin 2800000.0 4200000.0 4000000.0 3000000.0 '
       '-of GTiff ../Data/g250_06.tif ../Data/g250_06_UK.tif')
os.system(cmd)

# - reproject and resample into a 2 km grid
cmd = ('gdalwarp -overwrite -s_srs EPSG:3035 -t_srs EPSG:27700 -r near '
       '-of GTiff -tr 2000 2000 -te -220000 -10000 680000 1080000 '
       '../Data/g250_06_UK.tif ../Data/G250_06_UK_BNG.tif')
os.system(cmd)

# tidy up the intermediate files
intermediates = ['../Data/g250_06_UK.tif', '../Data/bio1_merge.tif', '../Data/bio1_UK.tif',
                 '../Data/bio12_merge.tif', '../Data/bio12_UK.tif']
for x in intermediates:
    os.remove(x)

# B) Use python to get zonal stats
#    First define a couple of functions


def zonalStats(layer, classMap, classCodes):
    """ Loads a bioclim layer and runs the mean extraction
    within each landcover class.
    """
    # load the data into an array
    bioclimLayer = gdal.Open('../Data/{f}_UK_BNG.tif'.format(f=layer))
    bcData = bioclimLayer.ReadAsArray()

    # get and mask the no data values
    bioclimBand = bioclimLayer.GetRasterBand(1)
    noData = bioclimBand.GetNoDataValue()
    bcData = numpy.ma.masked_where(bcData == noData, bcData)

    # run the mean extraction across it
    means = [meanExtract(lcc, classMap, bcData) for lcc in classCodes]

    # close the layer
    bioclimLayer = None

    return means


def meanExtract(lcc, classMap, data):
    """ Extracts the values from the bioclim layer at a given landcover class
    and then finds the mean. Assumes no data values are already masked.
    """
    # get a paired list of indices in the landcover that
    # match the input value
    locs = numpy.where(classMap == lcc)

    # extract those indices from the bioclim data
    vals = data[locs]

    return round(vals.mean(), 2)

# Load the landcover data into an array
landcover = gdal.Open('../Data/G250_06_UK_BNG.tif')
lcData = landcover.ReadAsArray()

# find the set of landcover classes
lcClasses, lcFreq = numpy.unique(lcData, return_counts=True)

# get a list of values for each variable
zonalMeans = [zonalStats(x, lcData, lcClasses) for x in bioclimVars]

# create a list of  columns to export (LCC codes, bio1 mean, bio12 mean)
columns = [list(lcClasses)] + zonalMeans
# unpack into rows of data
rows = zip(*columns)

# write the rows out to a file
with open('../Results/zonalstats.csv', 'wb') as csvfile:
    c = csv.writer(csvfile)
    c.writerow(['LCC', 'bio1', 'bio12'])
    for x in rows:
        c.writerow(list(x))
**********************************************************************

Testing Practical1.py...

Practical1.py is a Python script file;
 checking for docstrings...

Found one or more doctrings!

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error:
Traceback (most recent call last):
  File "Practical1.py", line 11, in <module>
    import gdal  # to handle raster data files
ImportError: No module named gdal

======================================================================
======================================================================
Finished running scripts

Ran into 1 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Marks for the Week = 100

NOTE THAT THESE ARE NOT THE FINAL MARKS FOR THE WEEK, BUT AN UPPER BOUND ON THE MARKS!